--=====================================================================
-- Panda-Auth-API
--=====================================================================
-- Original Developers: Skie & Encrypted (PandaAuth Developers)
-- Rewritten By: Mr. Lolegic (With Minor Security Improvements)
--=====================================================================

-- Security Checks
pcall(game.HttpGet, game, setmetatable({}, {
    __tostring = function()
        print("Kick Player")
        return ""
    end,
}))

-- Debugging
getgenv().Debugging = true -- Changes whether or not you see debugging shit, default to true

-- Panda Related
local PandaAuth = loadstring(game:HttpGet('https://pandadevelopment.net/service_api/PandaBetaLib.lua'))()
local Service = "pandadevkit"

-- loadstring(game:HttpGet("https://pandadevelopment.net/service_api/PandaBetaLib.lua"))({
--     Service = "Service Name", -- Used for a watermark
--     BetaSecurity = false,     -- Only used if you want to test out beta security options
--     Debugging = false,        -- Used to turn off annoying debugging messages in console
-- });

-- Other
local KeyLib = loadstring(game:HttpGet('https://pandadevelopment.net/scripts/UILib/OrionHub.lua'))()
local KeyWindow = KeyLib:MakeWindow({Name = "Test Key", HidePremium = false, SaveConfig = false, ConfigFolder = "PandaSH"})
local KeyTab = KeyWindow:MakeTab({
    Name = "Key System",
    Icon = "rbxassetid://5179834402",
})

--- We use this to decrypt the PandaAuth:ValidateKey output
--- @param  Key           string   The decryption key (Service)
--- @param  EncryptedData string   The encrypted data (returned from ValidateKey function)
--- @return string        result   The result which will be checked.
local function decrypt(Key, EncryptedData)
    local keyBytes = {string.byte(Key, 1, -1)}
    local encryptedBytes = {string.byte(EncryptedData, 1, -1)}

    local resultBytes = {}

    for i = 1, #encryptedBytes do
        resultBytes[i] = string.char(bit32.bxor(encryptedBytes[i], keyBytes[i % #keyBytes + 1]))
    end

    return table.concat(resultBytes)
end

KeyTab:AddTextbox({
    Name = "Key",
    Default = "",
    Callback = function(Key)
        print("Input Key: " .. Key)
        local Data = PandaAuth:ValidateKey(Service, Key)
        local decData = decrypt(Data, Key)

        if decData == "Mr. Lolegic" then
            KeyLib:MakeNotification({
                Name = "Panda Script Hub",
                Content = "Key Successfully Validated",
                Image = "rbxassetid://5179834402",
                Time = 5
            })
        else
            KeyLib:MakeNotification({
                Name = "Panda Script Hub",
                Content = "Invalid Key..Please Try again",
                Image = "rbxassetid://5179834402",
                Time = 5
            })
        end
    end
})

KeyTab:AddButton({
    Name = "Get Key",
    Callback = function()
        setclipboard(PandaAuth:GetLink(Service))
        KeyLib:MakeNotification({
            Name = "Panda Script Hub",
            Content = "Copied to your clipboard, Paste it on your browser to begin getting the key",
            Image = "rbxassetid://5179834402",
            Time = 5
        })
    end
})
